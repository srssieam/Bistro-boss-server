---------------------------
    Naming Convention
---------------------------
* app.get('/users')
* app.get('/users/:id')
* app.post('/users')
* app.put('/users/:id')
* app.patch('/users/:id')
* app.delete('/users/:id')


    insert users email if user doesn't exists
-------------------------------------------------
* way 1) make the email unique in database
* way 2) upsert:- if email already exists then update or if doesn't exists then insert ,
* way 3) simple checking

    jwt
-------------
* npm install jsonwebtoken
* const jwt = require('jsonwebtoken')
* > node
* > >require('crypto').randomeBytes(64).toString('hex')
* copy
* past in .env file:-

        ACCESS_TOKEN_SECRET = 'the token'


* receive user email and send token to the client side :-

        app.post('/jwt', async(req, res) =>{
            const user = req.body;
            const token = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: '2h'});
            res.send({ token })
        })

* receiving token from client (while user routing "manage user" route )
* created a verifyToken middleware, that receive data from header
* here,
        const token = req.headers.authorization  // ('Bearer eylsojfosjldkfjIHfl')
* so we have to split it to get the token:-
        const token = req.headers.authorization.split(' ')[1]  // 'eylsojfosjldkfjIHfl'


-------------------------------------------
    create server side payment intents
-------------------------------------------
* react strip js github > stripe.com/docs/stripe-js/react
* payment > Get started > Quick start
* select -> Javascript SDK | React | Node
* npm install --save @stripe/react-st
* get secret key from strip.com > Developers > API keys > Reveal test key > copy
* .env -> STRIPE_SECRET_KEY = past
* require stripe:-
    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY)
* 